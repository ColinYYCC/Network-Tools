# 參考Lucy（@Repcz）
# Author:https://github.com/ColinYYCC
#
# 官方文档：https://wiki.metacubex.one/
#
# 以 '#' 或 '//' 开头的配置文件行为注释行
#
# Mihomo Version ≥ 1.8.4
#
# ================

proxy-providers:
  Subscribe: {url: http://your-service-provider, path: ./proxy-providers/Sub.yaml, type: http, interval: 86400, health-check: {enable: true, url: http://latency-test.skk.moe/endpoint, interval: 1800}}
  # 在此将"http://your-service-provider"替换为你的机场订阅，推荐使用 base64 或者 node list
  # Sub-Store生成的链接,可以直接替换上述 url 引号中的部分,具体见 Sub-Store 教程         

# 混合端口 HTTP和SOCKS5用一个端口
mixed-port: 7893
# TCP 并发连接所有 IP, 将使用最快握手的 TCP
tcp-concurrent: true
# 允许局域网的连接（可用来共享代理）
allow-lan: true
# 开启 IPv6 总开关，关闭阻断所有 IPv6 链接和屏蔽 DNS 请求 AAAA 记录  
ipv6: false
# 设置日志输出级别: silent/error/warning/info/debug
log-level: info
unified-delay: true
# 全局 TLS 指纹
global-client-fingerprint: chrome
# 匹配所有进程（always/strict/off）
find-process-mode: strict
external-controller: 127.0.0.1:9090
external-ui: ui
external-ui-url: "https://github.com/MetaCubeX/metacubexd/archive/refs/heads/gh-pages.zip"

# 使用geoip.dat数据库
geodata-mode: true
geox-url:
  geoip: "https://github.com/xream/geoip/releases/latest/download/ipinfo.geoip.dat"
  geosite: "https://mirror.ghproxy.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geosite.dat"
  mmdb: "https://github.com/xream/geoip/releases/latest/download/ipinfo.country.mmdb"
  asn: "https://github.com/xream/geoip/releases/latest/download/ipinfo.asn.mmdb"

profile:
  # 存储 select 选择记录
  store-selected: true 
  # 持久化 fake-ip
  store-fake-ip: true  

# 嗅探域名 可选配置
sniffer:
  enable: true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]

# Tun 配置  
tun:
  enable: true
  # 可选： system/gvisor/mixed；
  stack: mixed
  # dns劫持,一般设置为 any:53 即可, 即劫持所有53端口的udp流量
  dns-hijack: [8.8.8.8:53, 8.8.4.4:53]
        
dns:
  enable: true
  # IPV6解析开关；如果为false，将返回ipv6结果为空
  ipv6: false
  # 模式：redir-host或fake-ip
  enhanced-mode: fake-ip
  # DNS监听地址
  listen: :1053
  # Fake-IP解析地址池
  fake-ip-range: 28.0.0.1/8
  # fakeip 过滤，以下地址不会下发 fakeip 映射用于连接
  fake-ip-filter: ['+.lan', '*', '+.local']
  #默认的域名解析服务器
  default-nameserver: [9.9.9.9, 149.112.112.112]
  nameserver: [9.9.9.9, 149.112.112.112]
  nameserver-policy:
    'geosite:cn': system
    'geosite:gfw,geolocation-!cn': [quic://223.5.5.5, quic://223.6.6.6, https://1.12.12.12/dns-query, https://120.53.53.53/dns-query]

# 锚点参数
pg: &pg {type: select, proxies: [手动切换, 香港节点, 美国节点, 狮城节点, 日本节点, 台湾节点, 韩国节点, 🔯 故障转移, 🔮 负载均衡, DIRECT]}
# 订阅更新和延迟测试相关参数
p: &p {type: http, interval: 86400, health-check: {enable: true, url: http://latency-test.skk.moe/endpoint, interval: 1800}}
# 自动选择策略组：选取延迟最低节点
url-test: &url-test {type: url-test, lazy: true, url: http://latency-test.skk.moe/endpoint, interval: 300, tolerance: 0, include-all: true}
# 手动选择策略组：手动选择想要的节点/策略组
select: &select {type: select, include-all: true}
# 故障回退策略组：策略组将按顺序选择你列表中第一个可用的节点
fallback: &fallback {type: fallback, lazy: true, url: http://latency-test.skk.moe/endpoint, interval: 300, include-all: true}
# 负载均衡策略组：不同的请求将使用不同的代理节点
load-balance: &load-balance {type: load-balance, lazy: true, strategy: consistent-hashing, url: http://latency-test.skk.moe/endpoint, interval: 300, include-all: true}
# classical规则相关
c: &c {type: http, behavior: classical, format: text, interval: 86400}
# domain规则相关
d: &d {type: http, behavior: domain, format: text, interval: 86400}
# ipcidr规则相关
i: &i {type: http, behavior: ipcidr, format: text, interval: 86400}

proxy-groups:

  - {name: 手动切换, type: select, include-all: true, proxies: [🛰️ 自动选择, 香港节点, 美国节点, 狮城节点, 日本节点, 台湾节点, 韩国节点, 🔮 负载均衡, DIRECT], icon: https://raw.githubusercontent.com/Semporia/Hand-Painted-icon/master/Universal/Auto_Speed.png}
  - {name: 国外网站, <<: *pg, icon: https://raw.githubusercontent.com/tugepaopao/Image-Storage/master/hand-painted/56.png}
  - {name: 国际媒体, <<: *pg, icon: https://raw.githubusercontent.com/Semporia/Hand-Painted-icon/master/Universal/Netflix.png}
  - {name: 苹果服务, <<: *pg, icon: https://raw.githubusercontent.com/Semporia/Hand-Painted-icon/master/Social_Media/Apple.png}
  - {name: 微软服务, <<: *pg, icon: https://raw.githubusercontent.com/Semporia/Hand-Painted-icon/master/Universal/Microsoft.png}
  - {name: 谷歌服务, <<: *pg, icon: https://github.com/tugepaopao/Image-Storage/raw/master/cartoon/Cute/google.png}
  - {name: 电报消息, <<: *pg, icon: https://github.com/tugepaopao/Image-Storage/raw/master/hand-painted/36.png}
  - {name: 推特消息, <<: *pg, icon: https://raw.githubusercontent.com/Semporia/Hand-Painted-icon/master/Social_Media/Twitter.png}
  - {name: AI, <<: *pg, https://raw.githubusercontent.com/Orz-3/mini/master/Color/OpenAI.png}
  - {name: 游戏平台, <<: *pg, icon: https://github.com/tugepaopao/Image-Storage/raw/master/hand-painted/35.png}
  - {name: Emby, <<: *pg, include-all: true, icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Emby.png}
  - {name: 广告拦截, type: select, proxies: [REJECT, DIRECT], icon: https://raw.githubusercontent.com/Semporia/Hand-Painted-icon/master/Universal/Reject.orig.png}
  - {name: 漏网之鱼, type: select, include-all: true, proxies: [🛰️ 自动选择, 香港节点, 美国节点, 狮城节点, 日本节点, 台湾节点, 韩国节点, 🔮 负载均衡, DIRECT], icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Final.png}
  - {name: 香港节点, <<: *fallback, filter: "^(?=.*((?i)🇭🇰|香港|(\b(HK|Hong)\b))).*$", hidden: true, icon: https://raw.githubusercontent.com/Semporia/Hand-Painted-icon/master/Rounded_Rectangle/Hong_Kong.png}
  - {name: 韩国节点, <<: *fallback, filter: "^(?=.*((?i)🇰🇷|韩国|韓|首尔|(\b(KR|Korea)\b))).*$", hidden: true, icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/China.png}
  - {name: 美国节点, <<: *fallback, filter: "^(?=.*((?i)🇺🇸|美国|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|(\b(US|United States)\b))).*$", hidden: true, icon: https://raw.githubusercontent.com/Semporia/Hand-Painted-icon/master/Rounded_Rectangle/United_States.png}
  - {name: 狮城节点, <<: *fallback, filter: "^(?=.*((?i)🇸🇬|新加坡|狮|(\b(SG|Singapore)\b))).*$", hidden: true, icon: https://raw.githubusercontent.com/Semporia/Hand-Painted-icon/master/Rounded_Rectangle/Singapore.png}
  - {name: 日本节点, <<: *fallback, filter: "^(?=.*((?i)🇯🇵|日本|川日|东京|大阪|泉日|埼玉|(\b(JP|Japan)\b))).*$", hidden: true, icon: https://raw.githubusercontent.com/Semporia/Hand-Painted-icon/master/Rounded_Rectangle/Japan.png}
  - {name: 台湾节点, <<: *fallback, filter: "^(?=.*((?i)🇹🇼|台湾|(\b(TW|Tai|Taiwan)\b))).*$", hidden: true, icon: https://raw.githubusercontent.com/Semporia/Hand-Painted-icon/master/Rounded_Rectangle/Taiwan.png}
  - {name: 🛰️ 自动选择, <<: *url-test, filter: "^(?=.*(.))(?!.*((?i)群|邀请|返利|循环|官网|客服|网站|网址|获取|订阅|流量|到期|机场|下次|版本|官址|备用|过期|已用|联系|邮箱|工单|贩卖|通知|倒卖|防止|国内|地址|频道|无法|说明|使用|提示|特别|访问|支持|教程|关注|更新|作者|加入|(\b(USE|USED|TOTAL|EXPIRE|EMAIL|Panel|Channel|Author)\b))).*$", proxy-groups:, icon: https://raw.githubusercontent.com/Semporia/Hand-Painted-icon/master/Universal/Auto_Speed.png}
  - {name: 🔮 负载均衡, <<: *load-balance, filter: "^(?=.*(.))(?!.*((?i)群|邀请|返利|循环|官网|客服|网站|网址|获取|订阅|流量|到期|机场|下次|版本|官址|备用|过期|已用|联系|邮箱|工单|贩卖|通知|倒卖|防止|国内|地址|频道|无法|说明|使用|提示|特别|访问|支持|教程|关注|更新|作者|加入|(\b(USE|USED|TOTAL|EXPIRE|EMAIL|Panel|Channel|Author)\b))).*$", hidden: true, icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Available.png}

rule-providers:
  Sogouinput: {<<: *c, path: ./RuleSet/sogouinput.txt, url: https://ruleset.skk.moe/Clash/non_ip/sogouinput.txt}
  adrules: {<<: *c, path: ./RuleSet/adrules.list, url: https://adrules.top/adrules.list}
  Reject_non_ip: {<<: *c, path: ./RuleSet/reject_non_ip.txt, url: https://ruleset.skk.moe/Clash/non_ip/reject.txt}
  Apple Service: {<<: *c, path: ./RuleSet/apple_services.conf,  url: https://ruleset.skk.moe/List/non_ip/apple_services.conf}
  Apple CDN: {<<: *c, path: ./RuleSet/apple_cdn.conf,  url: https://ruleset.skk.moe/List/non_ip/apple_cdn.conf}
  云上贵州: {<<: *c, path: ./RuleSet/apple_cdn.conf,  url: https://ruleset.skk.moe/List/non_ip/apple_cn.conf}
  YouTube: {<<: *c, path: ./rule-providers/YouTube.list,  url: https://github.com/Repcz/Tool/raw/X/Clash/Rules/YouTube.list}
  Google: {<<: *c, path: ./rule-providers/Google.list,  url: https://github.com/Repcz/Tool/raw/X/Clash/Rules/Google.list}
  Telegram: {<<: *c, path: ./rule-providers/Telegram.list,  url: https://github.com/LucaLin233/Luca_Conf/blob/main/Surge/Rule/Telegram.list?raw=true}
  Twitter: {<<: *c, path: ./rule-providers/Twitter.list,  url: https://github.com/Repcz/Tool/raw/X/Clash/Rules/Twitter.list}
  Steam: {<<: *c, path: ./rule-providers/Steam.list,  url: https://github.com/Repcz/Tool/raw/X/Clash/Rules/Steam.list}
  Epic: {<<: *c, path: ./rule-providers/Epic.list,  url: https://github.com/Repcz/Tool/raw/X/Clash/Rules/Epic.list}
  AI: {<<: *c, path: ./rule-providers/AI.list,  url: https://github.com/Repcz/Tool/raw/X/Clash/Rules/AI.list}
  Emby: {<<: *c, path: ./rule-providers/Emby.list,  url: https://github.com/Repcz/Tool/raw/X/Clash/Rules/Emby.list}
  Spotify: {<<: *c, path: ./rule-providers/Spotify.list,  url: https://github.com/Repcz/Tool/raw/X/Clash/Rules/Spotify.list}
  Bahamut: {<<: *c, path: ./rule-providers/Bahamut.list,  url: https://github.com/Repcz/Tool/raw/X/Clash/Rules/Bahamut.list}
  Netflix: {<<: *c, path: ./rule-providers/Netflix.list,  url: https://github.com/Repcz/Tool/raw/X/Clash/Rules/Netflix.list}
  Disney: {<<: *c, path: ./rule-providers/Disney.list,  url: https://github.com/Repcz/Tool/raw/X/Clash/Rules/Disney.list}
  PrimeVideo: {<<: *c, path: ./rule-providers/PrimeVideo.list,  url: https://github.com/Repcz/Tool/raw/X/Clash/Rules/PrimeVideo.list}
  HBO: {<<: *c, path: ./rule-providers/HBO.list,  url: https://github.com/Repcz/Tool/raw/X/Clash/Rules/HBO.list}
  ChinaDomain: {<<: *c, path: ./RuleSet/ChinaDomain.list,  url: https://github.com/Repcz/Tool/raw/X/Clash/Rules/ChinaDomain.list}
  Domestic_non_ip: {<<: *c, path: ./RuleSet/domestic_non_ip.txt, url: https://ruleset.skk.moe/Clash/non_ip/domestic.txt}
  Direct_non_ip: {<<: *c, path: ./RuleSet/direct_non_ip.txt, url: https://ruleset.skk.moe/Clash/non_ip/direct.txt}
  Domestic_ip: {<<: *c, path: ./RuleSet/domestic_ip.txt, url: https://ruleset.skk.moe/Clash/ip/domestic.txt}
  China_ip: {<<: *i, path: ./RuleSet/china_ip.txt, url: https://ruleset.skk.moe/Clash/ip/china_ip.txt}

rules:
 - RULE-SET,云上贵州,DIRECT
  - RULE-SET,Apple CDN,DIRECT
  - RULE-SET,Sogouinput,广告拦截
  - RULE-SET,adrules,广告拦截
  - RULE-SET,Reject_non_ip,广告拦截
  - DOMAIN-SUFFIX,zoom.us,国外网站
  - RULE-SET,AI,AI
  - RULE-SET,Apple Service,苹果服务
  - RULE-SET,YouTube,谷歌服务
  - RULE-SET,Google,谷歌服务
  - RULE-SET,Telegram,电报消息
  - RULE-SET,Twitter,推特消息
  - RULE-SET,Steam,游戏平台
  - RULE-SET,Epic,游戏平台
  - RULE-SET,Emby,Emby
  - RULE-SET,Spotify,国际媒体
  - RULE-SET,Bahamut,国际媒体
  - RULE-SET,Netflix,国际媒体
  - RULE-SET,Disney,国际媒体
  - RULE-SET,PrimeVideo,国际媒体
  - RULE-SET,HBO,国际媒体
  - GEOSITE,onedrive,微软服务
  - GEOSITE,github,微软服务
  - GEOSITE,microsoft,微软服务
  - GEOSITE,gfw,国外网站
  - RULE-SET,ChinaDomain,DIRECT
  - RULE-SET,Domestic_non_ip,DIRECT
  - RULE-SET,Direct_non_ip,DIRECT
  - RULE-SET,China_ip,DIRECT,no-resolve
  - RULE-SET,Domestic_ip,DIRECT,no-resolve
  - GEOIP,lan,DIRECT
  - GEOIP,CN,DIRECT
  - MATCH,漏网之鱼

url-rewrite:
    - ^https?:\/\/(www.)?(g|google)\.cn https://www.google.com 302
    - ^https?:\/\/(ditu|maps).google\.cn https://maps.google.com 302
